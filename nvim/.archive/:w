local lualine = require('lualine')
-- local status, lualine = pcall(require, "lualine")
--
-- if not status then
--   return
-- end

-- get lualine nightfly theme
-- local lualine_nightfly = require("lualine.themes.nightfly")

-- new colors for theme
-- local new_colors = {
--   blue = "#65D1FF",
--   green = "#3EFFDC",
--   violet = "#FF61EF",
--   yellow = "#FFDA7B",
--   black = "#000000",
-- }
--
-- -- change nightlfy theme colors
-- lualine_nightfly.normal.a.bg = new_colors.blue
-- lualine_nightfly.insert.a.bg = new_colors.green
-- lualine_nightfly.visual.a.bg = new_colors.violet
-- lualine_nightfly.command = {
--   a = {
--     gui = "bold",
--     bg = new_colors.yellow,
--     fg = new_colors.black, -- black
--   },
-- }

-- configure lualine with modified theme
local function file_status()
  if vim.bo.modified then
    return '💾'
  else
    return '✔'
  end
end

local function is_process_running(name)
  -- os.execute returns true on success and nil + error message on failure.
  -- The pgrep command returns 0 (success) if the process is found and 1 (failure) if it is not.
  -- local success = os.execute('pgrep -f ' .. name .. ' > /dev/null 2>&1')
  local success = os.execute('pgrep -f ' .. name .. '')
  -- print(success)
  return success == true
end

local function check_build_runner()
  if is_process_running('build_runner') == true then
    return 'build runner 🏃'
  else
    return 'build runner 🚫'
  end
end

lualine.setup({
  options = {
    -- theme = lualine_nightfly,
    theme = "catppuccin",
  },
  sections = {
    lualine_a = { "mode" },
    lualine_b = { "branch" },
    lualine_c = { "filename" },
    -- lualine_c = { { "filename" },
    --   { file_status, color = { fg = { gui = 'Normal', cterm = 'Normal', cterm16 = 'Normal' } } } },

    lualine_d = {
      {
        "diagnostics",
        sources = { "nvim_lsp" },
        symbols = { error = " ", warn = " ", info = " " },
      },
      "diff",
    },
    lualine_x = { {
      check_build_runner, color = { fg = { gui = 'Normal', cterm = 'Normal', cterm16 = 'Normal' } },
    }, "encoding", "fileformat", "filetype" },
    lualine_y = { "progress" },
    lualine_z = { "location" },
  },
  -- describe what the buffer should look like when not the active buffer
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = { { "filename" },
      { file_status, color = { fg = { gui = 'Normal', cterm = 'Normal', cterm16 = 'Normal' } } } },
    lualine_x = { "location" },
    lualine_y = {},
    lualine_z = {},
  },
})
