#!/bin/zsh

XDG_CONFIG_HOME="$HOME/.config"
XDG_CACHE_HOME="$HOME/.cache"
XDG_DATA_HOME="$HOME/.local/share"
XDG_STATE_HOME="$HOME/.local/state"


# NOTE: the below script is always causing vscode to crash on startup, 
# because the shell that vscode initializes on startup is NOT the same as the
# vscode terminal shell (i.e. TERM_PROGRAM is NOT 'vscode')
# # initialize tmux if it's not already running in the current shell
# # NOTE: this must be initialized before p10k is initialized
# DOES_TMUX_EXIST=$(tmux ls 2>/dev/null)
# if [ "$TERM_PROGRAM" != "vscode" ] && [ -z "$TMUX" ] && [ -z "$DOES_TMUX_EXIST" ]; then
#   exec tmux new-session -A -s workspace
# fi


# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export ZSH="$HOME/.oh-my-zsh" # Path to your oh-my-zsh installation.
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# if [ "$TERM_PROGRAM" != "vscode" ] || [ "$COLORTERM" != "truecolor" ]; then
#       export TERM=xterm-kitty
# fi

# sets the TERM var if $TMUX is set and not empty
# [[ -n $TMUX ]] && export TERM="xterm-256color"

# ZSH_THEME="powerlevel10k/powerlevel10k"

# Below are miscellaneous OH MY ZSH settings that could be useful
# CASE_SENSITIVE="true" # case-sensitive completion.
# ENABLE_CORRECTION="true" # command auto-correction.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# ZSH plugins
plugins=(
  git 
  # zsh-autosuggestions 
  # zsh-syntax-highlighting 
  zsh-interactive-cd

  # untested plugins below:
  1password
  gh
  keychain
  kubectl
  minikube
  kind
  helm
  kubectx
  skaffold # autocompletion
  terraform # aliases and autocompletion
  fzf
  github
  vscode
  xcode
  tmux
  dotenv # - source .env variables when you cd into a directory
  gitignore
  # doctl # this causes 1password prompt when re-sourcing zshrc file, for some reason... so we should not use this

  # other plugins available that we should install at some point:
  # web-search
  # vi-mode
  # nvm
  # npm
  # macos
  # tmuxinator (?)
  # aliases - lists the shortcuts currently available
  # common-aliases
  # flutter - aliases for flutter commands
  # gcloud
  # git-auto-fetch
  # git-lfs
  # mongocli
  # operator-sdk
  # pod - cocoaPods completion
  # redis-cli
  # salt
  # ssh-agent - configure ssh-agent settings
  # web-search
)

# enable zsh completions from homebrew (note: must be done before oh-my-zsh.sh is sourced)
PATH="$(brew --prefix)/share/zsh/site-functions:${PATH}"
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

source $ZSH/oh-my-zsh.sh


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Set personal aliases, overriding those provided by oh-my-zsh
# For a full list of active aliases, run `alias`.
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh  
source $(brew --prefix)/share/powerlevel10k/powerlevel10k.zsh-theme

export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

# Determine the Homebrew installation directory
if [ -d "/usr/local/Homebrew" ]; then
    # Intel x86_64 platform
    HOMEBREW_PREFIX="/usr/local"
elif [ -d "/opt/homebrew" ]; then
    # Apple Silicon (M1/M2) platform
    HOMEBREW_PREFIX="/opt/homebrew"
else
    echo "Homebrew not found"
    return 1
fi

# Initialize Homebrew environment
eval "$(${HOMEBREW_PREFIX}/bin/brew shellenv)"
# echo $($(brew --prefix)/bin/brew shellenv)

# get the path to homebrew bin, if it exists (for both intel and M1 macs)
export PATH="$(brew --prefix)/bin:$PATH"

# MISC PATHS
export PATH="/usr/local/opt/ruby/bin:$PATH"
export GEM_HOME="$HOME/.gem" 
export KUBE_CONFIG_PATH="$HOME/.kube/config"

PATH=$PATH:~/.local/bin

. $(brew --prefix asdf)/libexec/asdf.sh

# source <(railway completion zsh)

source ~/.dotfiles/zsh/python.zsh
source ~/.dotfiles/zsh/credentials.zsh
source ~/.dotfiles/zsh/flutter.zsh
source ~/.dotfiles/zsh/aliases.zsh
source ~/.dotfiles/zsh/go.zsh

if [ -f ~/.dotfiles/zsh/.env.zsh ]; then
  source ~/.dotfiles/zsh/.env.zsh
fi

bindkey -v # set up vim motions in interactive terminal

# pnpm
export PNPM_HOME="$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac


# alias exa='exa -laFh --git --icons'
# alias ls='exa'


## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /Users/pattobrien/.dart-cli-completion/zsh-config.zsh ]] && . /Users/pattobrien/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]


# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/pattobrien/.cache/lm-studio/bin"
# End of LM Studio CLI section

